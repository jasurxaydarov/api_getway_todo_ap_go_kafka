package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/jasurxaydarov/api_getway_todo_ap_go_kafka/event"
	"github.com/jasurxaydarov/api_getway_todo_ap_go_kafka/graphql/schema"
	"github.com/jasurxaydarov/api_getway_todo_ap_go_kafka/models"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input models.NewTodo) (string, error) {
	ev := event.NewEvent()

	err := ev.CreateTodo(&input)

	if err != nil {

		return "err", err
	}

	return "succesfully created", err
}

// GetTodo is the resolver for the getTodo field.
func (r *mutationResolver) GetTodo(ctx context.Context, input models.GetByID) (*models.Todo, error) {
	panic(fmt.Errorf("not implemented: GetTodo - getTodo"))
}

// GetTodos is the resolver for the getTodos field.
func (r *mutationResolver) GetTodos(ctx context.Context, input models.Gets) ([]*models.Todo, error) {
	panic(fmt.Errorf("not implemented: GetTodos - getTodos"))
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input models.UpdateTodo) (string, error) {
	ev := event.NewEvent()

	err := ev.UpdateTodo(&input)

	if err != nil {

		return "err", err
	}

	return "succesfully created", err
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, input models.DeleteByID) (string, error) {
	ev := event.NewEvent()

	err := ev.DeleteTodo(&input)

	if err != nil {

		return "err", err
	}

	return "succesfully created", err
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input models.NewUser) (string, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// GetUser is the resolver for the getUser field.
func (r *mutationResolver) GetUser(ctx context.Context, input models.GetByID) (*models.User, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

// GetUsers is the resolver for the getUsers field.
func (r *mutationResolver) GetUsers(ctx context.Context, input models.Gets) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: GetUsers - getUsers"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input models.UpdateUser) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input models.DeleteByID) (string, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*models.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns schema.MutationResolver implementation.
func (r *Resolver) Mutation() schema.MutationResolver { return &mutationResolver{r} }

// Query returns schema.QueryResolver implementation.
func (r *Resolver) Query() schema.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
